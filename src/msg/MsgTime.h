// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MsgTime.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _MSGTIME_H_
#define _MSGTIME_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MsgTime_SOURCE)
#define MsgTime_DllAPI __declspec( dllexport )
#else
#define MsgTime_DllAPI __declspec( dllimport )
#endif // MsgTime_SOURCE
#else
#define MsgTime_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MsgTime_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure MsgTime defined by the user in the IDL file.
 * @ingroup MSGTIME
 */
class MsgTime
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MsgTime();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MsgTime();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MsgTime that will be copied.
     */
    eProsima_user_DllExport MsgTime(
            const MsgTime& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MsgTime that will be copied.
     */
    eProsima_user_DllExport MsgTime(
            MsgTime&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MsgTime that will be copied.
     */
    eProsima_user_DllExport MsgTime& operator =(
            const MsgTime& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MsgTime that will be copied.
     */
    eProsima_user_DllExport MsgTime& operator =(
            MsgTime&& x);

    /*!
     * @brief This function sets a value in member index1
     * @param _index1 New value for member index1
     */
    eProsima_user_DllExport void index1(
            uint32_t _index1);

    /*!
     * @brief This function returns the value of member index1
     * @return Value of member index1
     */
    eProsima_user_DllExport uint32_t index1() const;

    /*!
     * @brief This function returns a reference to member index1
     * @return Reference to member index1
     */
    eProsima_user_DllExport uint32_t& index1();

    /*!
     * @brief This function sets a value in member index2
     * @param _index2 New value for member index2
     */
    eProsima_user_DllExport void index2(
            uint32_t _index2);

    /*!
     * @brief This function returns the value of member index2
     * @return Value of member index2
     */
    eProsima_user_DllExport uint32_t index2() const;

    /*!
     * @brief This function returns a reference to member index2
     * @return Reference to member index2
     */
    eProsima_user_DllExport uint32_t& index2();

    /*!
     * @brief This function sets a value in member index3
     * @param _index3 New value for member index3
     */
    eProsima_user_DllExport void index3(
            uint32_t _index3);

    /*!
     * @brief This function returns the value of member index3
     * @return Value of member index3
     */
    eProsima_user_DllExport uint32_t index3() const;

    /*!
     * @brief This function returns a reference to member index3
     * @return Reference to member index3
     */
    eProsima_user_DllExport uint32_t& index3();

    /*!
     * @brief This function sets a value in member index4
     * @param _index4 New value for member index4
     */
    eProsima_user_DllExport void index4(
            uint32_t _index4);

    /*!
     * @brief This function returns the value of member index4
     * @return Value of member index4
     */
    eProsima_user_DllExport uint32_t index4() const;

    /*!
     * @brief This function returns a reference to member index4
     * @return Reference to member index4
     */
    eProsima_user_DllExport uint32_t& index4();

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MsgTime& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_index1;
    uint32_t m_index2;
    uint32_t m_index3;
    uint32_t m_index4;
    std::string m_message;
};

#endif // _MSGTIME_H_