// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MsgTime.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MsgTime.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

MsgTime::MsgTime()
{
    // m_index1 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a30d1e6
    m_index1 = 0;
    // m_index2 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5891e32e
    m_index2 = 0;
    // m_index3 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cb0ed20
    m_index3 = 0;
    // m_index4 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@8e24743
    m_index4 = 0;
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@74a10858
    m_message ="";

}

MsgTime::~MsgTime()
{





}

MsgTime::MsgTime(
        const MsgTime& x)
{
    m_index1 = x.m_index1;
    m_index2 = x.m_index2;
    m_index3 = x.m_index3;
    m_index4 = x.m_index4;
    m_message = x.m_message;
}

MsgTime::MsgTime(
        MsgTime&& x)
{
    m_index1 = x.m_index1;
    m_index2 = x.m_index2;
    m_index3 = x.m_index3;
    m_index4 = x.m_index4;
    m_message = std::move(x.m_message);
}

MsgTime& MsgTime::operator =(
        const MsgTime& x)
{

    m_index1 = x.m_index1;
    m_index2 = x.m_index2;
    m_index3 = x.m_index3;
    m_index4 = x.m_index4;
    m_message = x.m_message;

    return *this;
}

MsgTime& MsgTime::operator =(
        MsgTime&& x)
{

    m_index1 = x.m_index1;
    m_index2 = x.m_index2;
    m_index3 = x.m_index3;
    m_index4 = x.m_index4;
    m_message = std::move(x.m_message);

    return *this;
}

size_t MsgTime::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t MsgTime::getCdrSerializedSize(
        const MsgTime& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void MsgTime::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index1;
    scdr << m_index2;
    scdr << m_index3;
    scdr << m_index4;
    scdr << m_message;

}

void MsgTime::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index1;
    dcdr >> m_index2;
    dcdr >> m_index3;
    dcdr >> m_index4;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member index1
 * @param _index1 New value for member index1
 */
void MsgTime::index1(
        uint32_t _index1)
{
    m_index1 = _index1;
}

/*!
 * @brief This function returns the value of member index1
 * @return Value of member index1
 */
uint32_t MsgTime::index1() const
{
    return m_index1;
}

/*!
 * @brief This function returns a reference to member index1
 * @return Reference to member index1
 */
uint32_t& MsgTime::index1()
{
    return m_index1;
}

/*!
 * @brief This function sets a value in member index2
 * @param _index2 New value for member index2
 */
void MsgTime::index2(
        uint32_t _index2)
{
    m_index2 = _index2;
}

/*!
 * @brief This function returns the value of member index2
 * @return Value of member index2
 */
uint32_t MsgTime::index2() const
{
    return m_index2;
}

/*!
 * @brief This function returns a reference to member index2
 * @return Reference to member index2
 */
uint32_t& MsgTime::index2()
{
    return m_index2;
}

/*!
 * @brief This function sets a value in member index3
 * @param _index3 New value for member index3
 */
void MsgTime::index3(
        uint32_t _index3)
{
    m_index3 = _index3;
}

/*!
 * @brief This function returns the value of member index3
 * @return Value of member index3
 */
uint32_t MsgTime::index3() const
{
    return m_index3;
}

/*!
 * @brief This function returns a reference to member index3
 * @return Reference to member index3
 */
uint32_t& MsgTime::index3()
{
    return m_index3;
}

/*!
 * @brief This function sets a value in member index4
 * @param _index4 New value for member index4
 */
void MsgTime::index4(
        uint32_t _index4)
{
    m_index4 = _index4;
}

/*!
 * @brief This function returns the value of member index4
 * @return Value of member index4
 */
uint32_t MsgTime::index4() const
{
    return m_index4;
}

/*!
 * @brief This function returns a reference to member index4
 * @return Reference to member index4
 */
uint32_t& MsgTime::index4()
{
    return m_index4;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void MsgTime::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void MsgTime::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& MsgTime::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& MsgTime::message()
{
    return m_message;
}

size_t MsgTime::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool MsgTime::isKeyDefined()
{
    return false;
}

void MsgTime::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}
